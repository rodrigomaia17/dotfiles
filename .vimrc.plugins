set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.config/nvim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
call vundle#begin('~/.config/nvim/bundle')

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'
call vundle#end()            " required
filetype plugin indent on    " required


Plugin 'Shougo/deoplete.nvim'
Plugin 'ternjs/tern_for_vim'
Plugin 'Chiel92/vim-autoformat'
"Plugin 'vim-scripts/vim-auto-save'
Plugin 'digitaltoad/vim-jade'
Plugin 'wavded/vim-stylus'
Plugin 'takac/vim-hardtime'
Plugin 'Yggdroot/indentLine'
Plugin 'scrooloose/nerdtree'
Plugin 'ctrlpvim/ctrlp.vim'
Plugin 'tpope/vim-surround'
Plugin 'myusuf3/numbers.vim'
Plugin 'scrooloose/syntastic'
Plugin 'scrooloose/nerdcommenter'
Plugin 'bling/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
"Plugin 'Shougo/neocomplete'
Plugin 'Shougo/vimshell.vim'
Plugin 'pangloss/vim-javascript'
Plugin 'easymotion/vim-easymotion'
Plugin 'chase/vim-ansible-yaml'
Plugin 'tell-k/vim-autopep8'
Plugin 'editorconfig/editorconfig-vim'
Plugin 'honza/vim-snippets'
Plugin 'tmux-plugins/vim-tmux-focus-events'
Plugin 'godlygeek/tabular'
Plugin 'plasticboy/vim-markdown'
Plugin 'zenorocha/dracula-theme', {'rtp': 'vim/'}
colorscheme dracula
Plugin 'klen/python-mode' 
Plugin 'airblade/vim-gitgutter'
Plugin 'tpope/vim-sensible'
Plugin 'raimondi/delimitmate'
Plugin 'terryma/vim-multiple-cursors'
Plugin 'ElmCast/elm-vim'


Plugin 'rking/ag.vim'
let g:ag_working_path_mode="r"

let g:indentLine_faster = 1

" Use deoplete.
let g:python3_host_prog = '/Users/rmaia/.pyenv/shims/python3'
let g:python_host_prog = '/Users/rmaia/.pyenv/shims/python'

let g:deoplete#enable_at_startup = 1
if !exists('g:deoplete#omni#input_patterns')
  let g:deoplete#omni#input_patterns = {}
endif
let g:deoplete#disable_auto_complete = 1

 "deoplete tab-complete
inoremap <silent><expr> <Tab> pumvisible() ? "\<C-n>" : deoplete#mappings#manual_complete()

 ",<Tab> for regular tab
inoremap <Leader><Tab> <Space><Space>

Plugin 'ervandew/supertab'
let g:SuperTabDefaultCompletionType = "<c-n>"

" tern
autocmd FileType javascript nnoremap <silent> <buffer> gb :TernDef<CR>

" omnifuncs
augroup omnifuncs
  autocmd!
  autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
  autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
  autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
  autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
  autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
augroup end

  " tern
  if exists('g:plugs["tern_for_vim"]')
    let g:tern_show_argument_hints = 'on_hold'
    let g:tern_show_signature_in_pum = 1

    autocmd FileType javascript setlocal omnifunc=tern#Complete
  endif

  autocmd InsertLeave,CompleteDone * if pumvisible() == 0 | pclose | endif
  "let g:python3_host_prog = '/usr/local/opt/pyenv/shims/python3'
  let g:python_host_prog = '/usr/local/opt/pyenv/shims/python'

  autocmd BufNewFile,BufReadPost *.md set filetype=markdown
  autocmd BufNewFile,BufReadPost *.elm set filetype=elm
  "let g:markdown_fenced_languages = ['html', 'python', 'bash=sh']
  "let g:vim_markdown_emphasis_multiline = 0
  filetype plugin on

  " If you prefer the Omni-Completion tip window to close when a selection is
  " " made, these lines close it on movement in insert mode or when leaving
  " " insert mode
  autocmd CursorMovedI * if pumvisible() == 0|pclose|endif
  " autocmd InsertLeave * if pumvisible() == 0|pclose|endif
  nmap s <Plug>(easymotion-s)
  "Custons config
  let g:airline_powerline_fonts = 1
  let g:airline_theme = 'molokai'

  map <C-e> :NERDTreeToggle<CR>
  map <leader>e :NERDTreeFind<CR>
  nmap <leader>nt :NERDTreeFind<CR>

  let NERDTreeShowBookmarks=1
  let NERDTreeIgnore=['\.py[cd]$', '\~$', '\.swo$', '\.swp$', '^\.git$', '^\.hg$', '^\.svn$', '\.bzr$']
  let NERDTreeChDirMode=0
  let NERDTreeQuitOnOpen=1
  let NERDTreeMouseMode=2
  let NERDTreeShowHidden=1
  let NERDTreeKeepTreeInNewTab=1
  let g:nerdtree_tabs_open_on_gui_startup=0
  let g:syntastic_html_tidy_ignore_errors = [ '<template> is not recognized!' ]
  noremap <leader>h <Esc>:call ToggleHardMode()<CR>
